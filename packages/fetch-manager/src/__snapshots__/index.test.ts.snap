// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@graphql-box/fetch-manager >> batching >> multiple requests >> correct first response data 1`] = `
{
  "data": {
    "organization": {
      "description": "We are working to build community through open source technology. NB: members must have two-factor auth.",
      "id": "MDEyOk9yZ2FuaXphdGlvbjY5NjMx",
      "login": "facebook",
    },
  },
  "headers": Headers {
    Symbol(headers list): HeadersList {
      Symbol(headers map): Map {
        "content-length" => "418",
        "content-type" => "application/json",
        "cache-control" => "public, max-age=5",
      },
      Symbol(headers map sorted): null,
    },
    Symbol(guard): "response",
    Symbol(realm): {
      "settingsObject": {},
    },
  },
}
`;

exports[`@graphql-box/fetch-manager >> batching >> multiple requests >> correct request 1`] = `
[
  "https://api.github.com/graphql?requestId=f666cc27cdcfcecacb340b64fcf27506-70a245971c9c179bc5c30c3925e4881c",
  {
    "body": "{"batched":true,"requests":{"f666cc27cdcfcecacb340b64fcf27506":{"context":{"operation":"query","originalRequestHash":"","requestID":"123456789"},"request":"\\n    {\\n      organization(login: \\"facebook\\") {\\n        description\\n        login\\n        id\\n      }\\n    }\\n  "},"70a245971c9c179bc5c30c3925e4881c":{"context":{"operation":"query","originalRequestHash":"","requestID":"123456789"},"request":"\\n    {\\n      organization(login: \\"facebook\\") {\\n        email\\n        name\\n        url\\n        id\\n      }\\n    }\\n  "}}}",
    "headers": Headers {
      Symbol(headers list): HeadersList {
        Symbol(headers map): Map {
          "content-type" => "application/json",
        },
        Symbol(headers map sorted): Map {
          "content-type" => "application/json",
        },
      },
      Symbol(guard): "none",
    },
    "method": "POST",
  },
]
`;

exports[`@graphql-box/fetch-manager >> batching >> multiple requests >> correct second response data 1`] = `
{
  "data": {
    "organization": {
      "email": "",
      "id": "MDEyOk9yZ2FuaXphdGlvbjY5NjMx",
      "name": "Facebook",
      "url": "https://github.com/facebook",
    },
  },
  "headers": Headers {
    Symbol(headers list): HeadersList {
      Symbol(headers map): Map {
        "content-length" => "418",
        "content-type" => "application/json",
        "cache-control" => "public, max-age=5",
      },
      Symbol(headers map sorted): null,
    },
    Symbol(guard): "response",
    Symbol(realm): {
      "settingsObject": {},
    },
  },
}
`;

exports[`@graphql-box/fetch-manager >> batching >> single request >> correct request 1`] = `
[
  "https://api.github.com/graphql?requestId=ea1cbc58eca798225b53f59d95ffb23a",
  {
    "body": "{"batched":true,"requests":{"ea1cbc58eca798225b53f59d95ffb23a":{"context":{"operation":"query","originalRequestHash":"","requestID":"123456789"},"request":"\\n  {\\n    organization(login: \\"facebook\\") {\\n      description\\n      email\\n      login\\n      name\\n      url\\n      id\\n    }\\n  }\\n"}}}",
    "headers": Headers {
      Symbol(headers list): HeadersList {
        Symbol(headers map): Map {
          "content-type" => "application/json",
        },
        Symbol(headers map sorted): Map {
          "content-type" => "application/json",
        },
      },
      Symbol(guard): "none",
    },
    "method": "POST",
  },
]
`;

exports[`@graphql-box/fetch-manager >> batching >> single request >> correct response data 1`] = `
{
  "data": {
    "organization": {
      "description": "We are working to build community through open source technology. NB: members must have two-factor auth.",
      "email": "",
      "id": "MDEyOk9yZ2FuaXphdGlvbjY5NjMx",
      "login": "facebook",
      "name": "Facebook",
      "url": "https://github.com/facebook",
    },
  },
  "headers": Headers {
    Symbol(headers list): HeadersList {
      Symbol(headers map): Map {
        "content-length" => "319",
        "content-type" => "application/json",
        "cache-control" => "public, max-age=5",
      },
      Symbol(headers map sorted): null,
    },
    Symbol(guard): "response",
    Symbol(realm): {
      "settingsObject": {},
    },
  },
}
`;

exports[`@graphql-box/fetch-manager >> no batching >> when batch is false >> correct request 1`] = `
[
  "https://api.github.com/graphql?requestId=ea1cbc58eca798225b53f59d95ffb23a",
  {
    "body": "{"batched":false,"context":{"operation":"query","originalRequestHash":"","requestID":"123456789"},"request":"\\n  {\\n    organization(login: \\"facebook\\") {\\n      description\\n      email\\n      login\\n      name\\n      url\\n      id\\n    }\\n  }\\n"}",
    "headers": Headers {
      Symbol(headers list): HeadersList {
        Symbol(headers map): Map {
          "content-type" => "application/json",
        },
        Symbol(headers map sorted): Map {
          "content-type" => "application/json",
        },
      },
      Symbol(guard): "none",
    },
    "method": "POST",
  },
]
`;

exports[`@graphql-box/fetch-manager >> no batching >> when batch is false >> correct response data 1`] = `
{
  "data": {
    "organization": {
      "description": "We are working to build community through open source technology. NB: members must have two-factor auth.",
      "email": "",
      "id": "MDEyOk9yZ2FuaXphdGlvbjY5NjMx",
      "login": "facebook",
      "name": "Facebook",
      "url": "https://github.com/facebook",
    },
  },
  "headers": Headers {
    Symbol(headers list): HeadersList {
      Symbol(headers map): Map {
        "content-length" => "268",
        "content-type" => "application/json",
        "cache-control" => "public, max-age=5",
      },
      Symbol(headers map sorted): null,
    },
    Symbol(guard): "response",
    Symbol(realm): {
      "settingsObject": {},
    },
  },
}
`;

exports[`@graphql-box/fetch-manager >> no batching >> when context.hasDeferOrStream is true >> correct request 1`] = `
[
  "https://api.github.com/graphql?requestId=ea1cbc58eca798225b53f59d95ffb23a",
  {
    "body": "{"batched":false,"context":{"operation":"query","originalRequestHash":"","requestID":"123456789"},"request":"\\n  {\\n    organization(login: \\"facebook\\") {\\n      description\\n      email\\n      login\\n      name\\n      url\\n      id\\n    }\\n  }\\n"}",
    "headers": Headers {
      Symbol(headers list): HeadersList {
        Symbol(headers map): Map {
          "content-type" => "application/json",
        },
        Symbol(headers map sorted): Map {
          "content-type" => "application/json",
        },
      },
      Symbol(guard): "none",
    },
    "method": "POST",
  },
]
`;

exports[`@graphql-box/fetch-manager >> no batching >> when context.hasDeferOrStream is true >> correct response data 1`] = `
{
  "data": {
    "organization": {
      "description": "We are working to build community through open source technology. NB: members must have two-factor auth.",
      "email": "",
      "id": "MDEyOk9yZ2FuaXphdGlvbjY5NjMx",
      "login": "facebook",
      "name": "Facebook",
      "url": "https://github.com/facebook",
    },
  },
  "headers": Headers {
    Symbol(headers list): HeadersList {
      Symbol(headers map): Map {
        "content-length" => "268",
        "content-type" => "application/json",
        "cache-control" => "public, max-age=5",
      },
      Symbol(headers map sorted): null,
    },
    Symbol(guard): "response",
    Symbol(realm): {
      "settingsObject": {},
    },
  },
}
`;

exports[`@graphql-box/fetch-manager >> when content type multipart is returned >> correct request 1`] = `
[
  "https://api.github.com/graphql?requestId=736da61e389d3e664e8cb26527eab248",
  {
    "body": "{"batched":false,"context":{"operation":"query","originalRequestHash":"","requestID":"123456789"},"request":"\\n  {\\n    organization(login: \\"facebook\\") {\\n      ...OrganizationFieldsA @defer(if: true, label: \\"organizationDefer\\")\\n      login\\n      name\\n      repositories(first: 10) {\\n        edges {\\n          node {\\n            ... on Repository @include(if: true) {\\n              licenseInfo {\\n                permissions {\\n                  ...PermissionsFields @defer(if: true, label: \\"permissionsDefer\\")\\n                }\\n                id\\n              }\\n              ...RepositoryFields @skip(if: false) @defer(if: true, label: \\"repositoryDefer\\")\\n              id\\n            }\\n          }\\n        }\\n      }\\n      url\\n      id\\n    }\\n  }\\n\\n  fragment OrganizationFieldsA on Organization {\\n    email @include(if: true)\\n    description\\n    isVerified\\n    location\\n  }\\n\\n  fragment RepositoryFields on Repository {\\n    description\\n    homepageUrl\\n    name\\n  }\\n\\n  fragment PermissionsFields on LicenseRule {\\n    label @skip(if: false)\\n  }\\n"}",
    "headers": Headers {
      Symbol(headers list): HeadersList {
        Symbol(headers map): Map {
          "content-type" => "application/json",
        },
        Symbol(headers map sorted): Map {
          "content-type" => "application/json",
        },
      },
      Symbol(guard): "none",
    },
    "method": "POST",
  },
]
`;

exports[`@graphql-box/fetch-manager >> when content type multipart is returned >> correct response data 1`] = `
[
  {
    "data": {
      "organization": {
        "id": "MDEyOk9yZ2FuaXphdGlvbjY5NjMx",
        "login": "facebook",
        "repositories": {
          "edges": [
            {
              "node": {
                "id": "MDEwOlJlcG9zaXRvcnk0NTU2MDA=",
                "licenseInfo": {
                  "id": "MDc6TGljZW5zZTA=",
                },
              },
            },
            {
              "node": {
                "id": "MDEwOlJlcG9zaXRvcnk1NjU0MjY=",
                "licenseInfo": {
                  "id": "MDc6TGljZW5zZTU=",
                },
              },
            },
            {
              "node": {
                "id": "MDEwOlJlcG9zaXRvcnk2NTkzNDE=",
                "licenseInfo": {
                  "id": "MDc6TGljZW5zZTA=",
                },
              },
            },
            {
              "node": {
                "id": "MDEwOlJlcG9zaXRvcnk3Mzg0OTE=",
                "licenseInfo": {
                  "id": "MDc6TGljZW5zZTA=",
                },
              },
            },
            {
              "node": {
                "id": "MDEwOlJlcG9zaXRvcnk0NTI0MTgx",
                "licenseInfo": {
                  "id": "MDc6TGljZW5zZTI=",
                },
              },
            },
            {
              "node": {
                "id": "MDEwOlJlcG9zaXRvcnk2ODMzMzQ1",
                "licenseInfo": {
                  "id": "MDc6TGljZW5zZTA=",
                },
              },
            },
            {
              "node": {
                "id": "MDEwOlJlcG9zaXRvcnk2OTMwNDg5",
                "licenseInfo": {
                  "id": "MDc6TGljZW5zZTEz",
                },
              },
            },
            {
              "node": {
                "id": "MDEwOlJlcG9zaXRvcnk2OTM0Mzk1",
                "licenseInfo": {
                  "id": "MDc6TGljZW5zZTA=",
                },
              },
            },
            {
              "node": {
                "id": "MDEwOlJlcG9zaXRvcnk4MzIyNjQ5",
                "licenseInfo": {
                  "id": "MDc6TGljZW5zZTI=",
                },
              },
            },
            {
              "node": {
                "id": "MDEwOlJlcG9zaXRvcnk5NDU0Njc1",
                "licenseInfo": {
                  "id": "MDc6TGljZW5zZTg=",
                },
              },
            },
          ],
        },
      },
    },
    "hasNext": true,
    "headers": {},
  },
  {
    "data": {
      "organization": {
        "email": null,
        "isVerified": true,
        "location": "Menlo Park, California",
        "repositories": {
          "edges": [
            {
              "node": {
                "licenseInfo": {
                  "permissions": [],
                },
              },
            },
            {
              "node": {
                "licenseInfo": {
                  "permissions": [
                    {
                      "label": "Commercial use",
                    },
                    {
                      "label": "Modification",
                    },
                    {
                      "label": "Distribution",
                    },
                    {
                      "label": "Private use",
                    },
                  ],
                },
              },
            },
            {
              "node": {
                "licenseInfo": {
                  "permissions": [],
                },
              },
            },
            {
              "node": {
                "licenseInfo": {
                  "permissions": [],
                },
              },
            },
            {
              "node": {
                "licenseInfo": {
                  "permissions": [
                    {
                      "label": "Commercial use",
                    },
                    {
                      "label": "Modification",
                    },
                    {
                      "label": "Distribution",
                    },
                    {
                      "label": "Patent use",
                    },
                    {
                      "label": "Private use",
                    },
                  ],
                },
              },
            },
            {
              "node": {
                "licenseInfo": {
                  "permissions": [],
                },
              },
            },
            {
              "node": {
                "licenseInfo": {
                  "permissions": [
                    {
                      "label": "Commercial use",
                    },
                    {
                      "label": "Modification",
                    },
                    {
                      "label": "Distribution",
                    },
                    {
                      "label": "Private use",
                    },
                  ],
                },
              },
            },
            {
              "node": {
                "licenseInfo": {
                  "permissions": [],
                },
              },
            },
            {
              "node": {
                "licenseInfo": {
                  "permissions": [
                    {
                      "label": "Commercial use",
                    },
                    {
                      "label": "Modification",
                    },
                    {
                      "label": "Distribution",
                    },
                    {
                      "label": "Patent use",
                    },
                    {
                      "label": "Private use",
                    },
                  ],
                },
              },
            },
            {
              "node": {
                "licenseInfo": {
                  "permissions": [
                    {
                      "label": "Commercial use",
                    },
                    {
                      "label": "Modification",
                    },
                    {
                      "label": "Distribution",
                    },
                    {
                      "label": "Private use",
                    },
                  ],
                },
              },
            },
          ],
        },
      },
    },
    "hasNext": false,
    "headers": {},
    "paths": [
      "organisation",
      "organisation.repositories.edges.0.node.licenseInfo.permissions",
      "organisation.repositories.edges.1.node.licenseInfo.permissions",
      "organisation.repositories.edges.2.node.licenseInfo.permissions",
      "organisation.repositories.edges.3.node.licenseInfo.permissions",
      "organisation.repositories.edges.4.node.licenseInfo.permissions",
      "organisation.repositories.edges.5.node.licenseInfo.permissions",
      "organisation.repositories.edges.6.node.licenseInfo.permissions",
      "organisation.repositories.edges.7.node.licenseInfo.permissions",
      "organisation.repositories.edges.8.node.licenseInfo.permissions",
      "organisation.repositories.edges.9.node.licenseInfo.permissions",
    ],
  },
]
`;
