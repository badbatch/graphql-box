// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@handl/request-parser when a mutation with an input type variable is passed in then the parser should return the query with the input type variable embedded in it 1`] = `
"mutation {
  addStar(input: {clientMutationId: \\"1\\", starrableId: \\"MDEwOlJlcG9zaXRvcnkzODMwNzQyOA==\\"}) {
    clientMutationId
    starrable {
      viewerHasStarred
      id
    }
  }
}
"
`;

exports[`@handl/request-parser when a mutation with an input type variable is passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "mutation.addStar" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "typeIDValue": undefined,
      "typeName": "AddStarPayload",
    },
    "mutation.addStar.starrable" => Object {
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Starrable",
    },
  },
  "handlID": "123456789",
  "operation": "mutation",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@handl/request-parser when a query with a directive is passed in then the parser should return the query with the directive retained 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    repositories(first: 6) @include(if: true) {
      edges {
        node {
          description
          homepageUrl
          name
          id
        }
      }
    }
    url
    id
  }
}
"
`;

exports[`@handl/request-parser when a query with a directive is passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.repositories" => Object {
      "hasArguments": true,
      "hasDirectives": true,
      "isEntity": false,
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => Object {
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => Object {
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
  },
  "handlID": "123456789",
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@handl/request-parser when a query with a fragment option is passed in then the parser should return the query with the fragment option embedded in it 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}
"
`;

exports[`@handl/request-parser when a query with a fragment option is passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "handlID": "123456789",
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@handl/request-parser when a query with a fragment spread is passed in then the parser should return the query with the fragment spread embedded in it 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}
"
`;

exports[`@handl/request-parser when a query with a fragment spread is passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "handlID": "123456789",
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@handl/request-parser when a query with a variable is passed in then the parser should return the query with the variable embedded in it 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}
"
`;

exports[`@handl/request-parser when a query with a variable is passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "handlID": "123456789",
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@handl/request-parser when a query with an enum variable is passed in then the parser should return the query with the enum variable embedded in it 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    repositories(first: 6, ownerAffiliations: [OWNER, COLLABORATOR]) {
      edges {
        node {
          description
          homepageUrl
          name
          id
        }
      }
    }
    url
    id
  }
}
"
`;

exports[`@handl/request-parser when a query with an enum variable is passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.repositories" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => Object {
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => Object {
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
  },
  "handlID": "123456789",
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@handl/request-parser when a query with an inline fragment is passed in then the parser should return the query with the inline fragment embedded in it 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}
"
`;

exports[`@handl/request-parser when a query with an inline fragment is passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "handlID": "123456789",
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@handl/request-parser when a query with an operation name is passed in then the parser should return the query with the operation name retained 1`] = `
"query GetOrganization {
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}
"
`;

exports[`@handl/request-parser when a query with an operation name is passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "handlID": "123456789",
  "operation": "query",
  "operationName": "GetOrganization",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@handl/request-parser when a query with inline fragments for a union type are passed in then the parser should return the query with the inline fragments retained 1`] = `
"{
  search(query: \\"react\\", first: 10, type: REPOSITORY) {
    edges {
      node {
        ... on Organization {
          description
          login
          organizationName: name
          id
        }
        ... on Issue {
          bodyText
          number
          title
          id
        }
        ... on MarketplaceListing {
          slug
          shortDescription
          howItWorks
          id
        }
        ... on PullRequest {
          bodyText
          number
          title
          id
        }
        ... on Repository {
          description
          homepageUrl
          name
          id
        }
      }
    }
  }
}
"
`;

exports[`@handl/request-parser when a query with inline fragments for a union type are passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.search" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "typeIDValue": undefined,
      "typeName": "SearchResultItemConnection",
    },
    "query.search.edges" => Object {
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "typeIDValue": undefined,
      "typeName": "SearchResultItemEdge",
    },
  },
  "handlID": "123456789",
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@handl/request-parser when a query with multiple variables are passed in then the parser should return the query with the variables embedded in it 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    repositories(first: 6) {
      edges {
        node {
          description
          homepageUrl
          name
          id
        }
      }
    }
    url
    id
  }
}
"
`;

exports[`@handl/request-parser when a query with multiple variables are passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.repositories" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => Object {
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => Object {
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
  },
  "handlID": "123456789",
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@handl/request-parser when a query without a variable is passed in then the parser should return the query unchanged 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}
"
`;

exports[`@handl/request-parser when a query without a variable is passed in then the parser should update the request context with the correct data 1`] = `
Object {
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "handlID": "123456789",
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;
