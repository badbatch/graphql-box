// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@graphql-box/request-parser >> mutation >> input type variable >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "mutation.addStar" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "AddStarPayload",
    },
    "mutation.addStar.starrable" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": true,
      "isUnion": false,
      "possibleTypes": Array [
        Object {
          "isEntity": true,
          "typeName": "Repository",
        },
        Object {
          "isEntity": true,
          "typeName": "Gist",
        },
        Object {
          "isEntity": true,
          "typeName": "Topic",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "Starrable",
    },
    "mutation.addStar.starrable.stargazers" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "StargazerConnection",
    },
    "mutation.addStar.starrable.stargazers.edges" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "StargazerEdge",
    },
    "mutation.addStar.starrable.stargazers.edges.node" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "User",
    },
  },
  "hasDeferOrStream": false,
  "operation": "mutation",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> mutation >> input type variable >> correct request 1`] = `
"mutation {
  addStar(
    input: {clientMutationId: \\"1\\", starrableId: \\"MDEwOlJlcG9zaXRvcnkxMDA0NTUxNDg=\\"}
  ) {
    clientMutationId
    starrable {
      viewerHasStarred
      ... on Repository {
        stargazers(first: 6) {
          edges {
            node {
              name
              login
              id
            }
          }
        }
        id
      }
      __typename
    }
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> defer >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.repositories" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
    "query.organization.repositories.edges.node.licenseInfo" => Object {
      "directives": Object {
        "inherited": Array [
          "include({\\"if\\":true})",
        ],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "License",
    },
    "query.organization.repositories.edges.node.licenseInfo.permissions" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "LicenseRule",
    },
    "query.organization.repositories.edges.node.licenseInfo.permissions.label" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [
          "skip({\\"if\\":false})",
        ],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.repositories.edges.node.id" => Object {
      "directives": Object {
        "inherited": Array [
          "include({\\"if\\":true})",
        ],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "ID",
    },
    "query.organization.email" => Object {
      "directives": Object {
        "inherited": Array [
          "defer({\\"if\\":true,\\"label\\":\\"organizationDefer\\"})",
        ],
        "own": Array [
          "include({\\"if\\":true})",
        ],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.description" => Object {
      "directives": Object {
        "inherited": Array [
          "defer({\\"if\\":true,\\"label\\":\\"organizationDefer\\"})",
        ],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.isVerified" => Object {
      "directives": Object {
        "inherited": Array [
          "defer({\\"if\\":true,\\"label\\":\\"organizationDefer\\"})",
        ],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Boolean",
    },
    "query.organization.location" => Object {
      "directives": Object {
        "inherited": Array [
          "defer({\\"if\\":true,\\"label\\":\\"organizationDefer\\"})",
        ],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.repositories.edges.node.description" => Object {
      "directives": Object {
        "inherited": Array [
          "include({\\"if\\":true})",
          "skip({\\"if\\":false})",
          "defer({\\"if\\":true,\\"label\\":\\"repositoryDefer\\"})",
        ],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.repositories.edges.node.homepageUrl" => Object {
      "directives": Object {
        "inherited": Array [
          "include({\\"if\\":true})",
          "skip({\\"if\\":false})",
          "defer({\\"if\\":true,\\"label\\":\\"repositoryDefer\\"})",
        ],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "URI",
    },
    "query.organization.repositories.edges.node.name" => Object {
      "directives": Object {
        "inherited": Array [
          "include({\\"if\\":true})",
          "skip({\\"if\\":false})",
          "defer({\\"if\\":true,\\"label\\":\\"repositoryDefer\\"})",
        ],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
  },
  "hasDeferOrStream": true,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> defer >> correct request 1`] = `
"{
  organization(login: \\"facebook\\") {
    ...OrganizationFieldsA @defer(if: true, label: \\"organizationDefer\\")
    login
    name
    repositories(first: 10) {
      edges {
        node {
          ... on Repository @include(if: true) {
            licenseInfo {
              permissions {
                label @skip(if: false)
              }
              id
            }
            ...RepositoryFields @skip(if: false) @defer(if: true, label: \\"repositoryDefer\\")
            id
          }
        }
      }
    }
    url
    id
  }
}

fragment OrganizationFieldsA on Organization {
  email @include(if: true)
  description
  isVerified
  location
}

fragment RepositoryFields on Repository {
  description
  homepageUrl
  name
}"
`;

exports[`@graphql-box/request-parser >> query >> directive correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.email" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [
          "include({\\"if\\":true})",
        ],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.repositories" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [
          "include({\\"if\\":true})",
        ],
      },
      "hasArguments": true,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
    "query.organization.repositories.edges.node.owner" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": true,
      "isUnion": false,
      "possibleTypes": Array [
        Object {
          "isEntity": true,
          "typeName": "User",
        },
        Object {
          "isEntity": true,
          "typeName": "Organization",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "RepositoryOwner",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> directive correct request 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email @include(if: true)
    login
    name
    repositories(first: 6) @include(if: true) {
      edges {
        node {
          description
          homepageUrl
          name
          owner {
            login
            url
            ... on Organization {
              name
              id
            }
            __typename
          }
          id
        }
      }
    }
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> enum variable >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.repositories" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
    "query.organization.repositories.edges.node.owner" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": true,
      "isUnion": false,
      "possibleTypes": Array [
        Object {
          "isEntity": true,
          "typeName": "User",
        },
        Object {
          "isEntity": true,
          "typeName": "Organization",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "RepositoryOwner",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> enum variable >> correct request 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    repositories(first: 6, ownerAffiliations: [OWNER, COLLABORATOR]) {
      edges {
        node {
          description
          homepageUrl
          name
          owner {
            login
            url
            ... on Organization {
              name
              id
            }
            __typename
          }
          id
        }
      }
    }
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> fragment option >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> fragment option >> correct request 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> fragment spread >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> fragment spread >> correct request 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> inline fragment >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> inline fragment >> correct request 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> inline fragments >> union type >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.search" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "SearchResultItemConnection",
    },
    "query.search.edges" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "SearchResultItemEdge",
    },
    "query.search.edges.node" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": true,
      "possibleTypes": Array [
        Object {
          "isEntity": true,
          "typeName": "Issue",
        },
        Object {
          "isEntity": true,
          "typeName": "PullRequest",
        },
        Object {
          "isEntity": true,
          "typeName": "Repository",
        },
        Object {
          "isEntity": true,
          "typeName": "User",
        },
        Object {
          "isEntity": true,
          "typeName": "Organization",
        },
        Object {
          "isEntity": true,
          "typeName": "MarketplaceListing",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "SearchResultItem",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> inline fragments >> union type >> correct request 1`] = `
"{
  search(query: \\"react\\", first: 10, type: REPOSITORY) {
    edges {
      node {
        ... on Organization {
          description
          login
          organizationName: name
          id
        }
        ... on Issue {
          bodyText
          number
          title
          id
        }
        ... on MarketplaceListing {
          slug
          shortDescription
          howItWorks
          id
        }
        ... on PullRequest {
          bodyText
          number
          title
          id
        }
        ... on Repository {
          description
          homepageUrl
          name
          id
        }
        __typename
      }
    }
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> multiple variables >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.repositories" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
    "query.organization.repositories.edges.node.owner" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": true,
      "isUnion": false,
      "possibleTypes": Array [
        Object {
          "isEntity": true,
          "typeName": "User",
        },
        Object {
          "isEntity": true,
          "typeName": "Organization",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "RepositoryOwner",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> multiple variables >> correct request 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    repositories(first: 6) {
      edges {
        node {
          description
          homepageUrl
          name
          owner {
            login
            url
            ... on Organization {
              name
              id
            }
            __typename
          }
          id
        }
      }
    }
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> no variable >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> no variable >> correct request 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> operation name >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "GetOrganization",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> operation name >> correct request 1`] = `
"query GetOrganization {
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> union type inline fragments >> fragment spread >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.search" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "SearchResultItemConnection",
    },
    "query.search.edges" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "SearchResultItemEdge",
    },
    "query.search.edges.node" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": true,
      "possibleTypes": Array [
        Object {
          "isEntity": true,
          "typeName": "Issue",
        },
        Object {
          "isEntity": true,
          "typeName": "PullRequest",
        },
        Object {
          "isEntity": true,
          "typeName": "Repository",
        },
        Object {
          "isEntity": true,
          "typeName": "User",
        },
        Object {
          "isEntity": true,
          "typeName": "Organization",
        },
        Object {
          "isEntity": true,
          "typeName": "MarketplaceListing",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "SearchResultItem",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> union type inline fragments >> fragment spread >> correct request 1`] = `
"{
  search(query: \\"react\\", first: 10, type: REPOSITORY) {
    edges {
      node {
        ... on Organization {
          description
          email
          login
          organizationName: name
          url
          id
        }
        ... on Issue {
          bodyText
          number
          title
          id
        }
        ... on MarketplaceListing {
          slug
          shortDescription
          howItWorks
          id
        }
        ... on PullRequest {
          bodyText
          number
          title
          id
        }
        ... on Repository {
          description
          homepageUrl
          name
          id
        }
        __typename
      }
    }
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> variable correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> variable correct request 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> variable with default correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> variable with default correct request 1`] = `
"{
  organization(login: \\"facebook\\") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> with default correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> with default correct request 1`] = `
"{
  organization(login: \\"google\\") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> with number default correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "query.organization" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.repositories" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
  },
  "hasDeferOrStream": false,
  "operation": "query",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> with number default correct request 1`] = `
"{
  organization(login: \\"google\\") {
    description
    email
    login
    name
    repositories(first: 20) {
      edges {
        node {
          description
          name
          id
        }
      }
    }
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> subscription >> correct context data 1`] = `
Object {
  "boxID": "123456789",
  "debugManager": null,
  "fieldTypeMap": Map {
    "subscription.emailAdded" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Inbox",
    },
    "subscription.emailAdded.emails" => Object {
      "directives": Object {
        "inherited": Array [],
        "own": Array [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": Array [],
      "typeIDValue": undefined,
      "typeName": "Email",
    },
  },
  "hasDeferOrStream": false,
  "operation": "subscription",
  "operationName": "",
  "queryFiltered": false,
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> subscription >> correct request 1`] = `
"subscription {
  emailAdded {
    emails {
      from
      message
      subject
      unread
      id
    }
    total
    unread
    id
  }
}"
`;
