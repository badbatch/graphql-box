// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@graphql-box/request-parser >> mutation >> input type variable >> correct context data 1`] = `
{
  "data": {
    "operation": "mutation",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "mutation.addStar" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "AddStarPayload",
    },
    "mutation.addStar.starrable" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": true,
      "isUnion": false,
      "possibleTypes": [
        {
          "isEntity": true,
          "typeName": "Repository",
        },
        {
          "isEntity": true,
          "typeName": "Gist",
        },
        {
          "isEntity": true,
          "typeName": "Topic",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "Starrable",
    },
    "mutation.addStar.starrable.stargazers" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "StargazerConnection",
    },
    "mutation.addStar.starrable.stargazers.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "StargazerEdge",
    },
    "mutation.addStar.starrable.stargazers.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "User",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> mutation >> input type variable >> correct request 1`] = `
"mutation {
  addStar(
    input: {clientMutationId: "1", starrableId: "MDEwOlJlcG9zaXRvcnkxMDA0NTUxNDg="}
  ) {
    clientMutationId
    starrable {
      viewerHasStarred
      ... on Repository {
        stargazers(first: 6) {
          edges {
            node {
              name
              login
              id
            }
          }
        }
        id
      }
      __typename
    }
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> defer >> when experimentalDeferStreamSupport flag is true >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": true,
    "hasDeferOrStream": true,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.description" => {
      "directives": {
        "inherited": [
          "defer({"if":true,"label":"organizationDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.email" => {
      "directives": {
        "inherited": [
          "defer({"if":true,"label":"organizationDefer"})",
        ],
        "own": [
          "include({"if":true})",
        ],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.isVerified" => {
      "directives": {
        "inherited": [
          "defer({"if":true,"label":"organizationDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Boolean",
    },
    "query.organization.location" => {
      "directives": {
        "inherited": [
          "defer({"if":true,"label":"organizationDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.repositories" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
    "query.organization.repositories.edges.node.description" => {
      "directives": {
        "inherited": [
          "include({"if":true})",
          "skip({"if":false})",
          "defer({"if":true,"label":"repositoryDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.repositories.edges.node.homepageUrl" => {
      "directives": {
        "inherited": [
          "include({"if":true})",
          "skip({"if":false})",
          "defer({"if":true,"label":"repositoryDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "URI",
    },
    "query.organization.repositories.edges.node.id" => {
      "directives": {
        "inherited": [
          "include({"if":true})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "ID",
    },
    "query.organization.repositories.edges.node.licenseInfo" => {
      "directives": {
        "inherited": [
          "include({"if":true})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "License",
    },
    "query.organization.repositories.edges.node.licenseInfo.permissions" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "LicenseRule",
    },
    "query.organization.repositories.edges.node.licenseInfo.permissions.label" => {
      "directives": {
        "inherited": [
          "defer({"if":true,"label":"permissionsDefer"})",
        ],
        "own": [
          "skip({"if":false})",
        ],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.repositories.edges.node.name" => {
      "directives": {
        "inherited": [
          "include({"if":true})",
          "skip({"if":false})",
          "defer({"if":true,"label":"repositoryDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> defer >> when experimentalDeferStreamSupport flag is true >> correct request 1`] = `
"{
  organization(login: "facebook") {
    ...OrganizationFieldsA @defer(if: true, label: "organizationDefer")
    login
    name
    repositories(first: 10) {
      edges {
        node {
          ... on Repository @include(if: true) {
            licenseInfo {
              permissions {
                ...PermissionsFields @defer(if: true, label: "permissionsDefer")
              }
              id
            }
            ...RepositoryFields @skip(if: false) @defer(if: true, label: "repositoryDefer")
            id
          }
        }
      }
    }
    url
    id
  }
}

fragment OrganizationFieldsA on Organization {
  email @include(if: true)
  description
  isVerified
  location
}

fragment RepositoryFields on Repository {
  description
  homepageUrl
  name
}

fragment PermissionsFields on LicenseRule {
  label @skip(if: false)
}"
`;

exports[`@graphql-box/request-parser >> query >> directive correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.email" => {
      "directives": {
        "inherited": [],
        "own": [
          "include({"if":true})",
        ],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.organization.repositories" => {
      "directives": {
        "inherited": [],
        "own": [
          "include({"if":true})",
        ],
      },
      "hasArguments": true,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
    "query.organization.repositories.edges.node.owner" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": true,
      "isUnion": false,
      "possibleTypes": [
        {
          "isEntity": true,
          "typeName": "User",
        },
        {
          "isEntity": true,
          "typeName": "Organization",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "RepositoryOwner",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> directive correct request 1`] = `
"{
  organization(login: "facebook") {
    description
    email @include(if: true)
    login
    name
    repositories(first: 6) @include(if: true) {
      edges {
        node {
          description
          homepageUrl
          name
          owner {
            login
            url
            ... on Organization {
              name
              id
            }
            __typename
          }
          id
        }
      }
    }
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> enum variable >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.repositories" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
    "query.organization.repositories.edges.node.owner" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": true,
      "isUnion": false,
      "possibleTypes": [
        {
          "isEntity": true,
          "typeName": "User",
        },
        {
          "isEntity": true,
          "typeName": "Organization",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "RepositoryOwner",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> enum variable >> correct request 1`] = `
"{
  organization(login: "facebook") {
    description
    email
    login
    name
    repositories(first: 6, ownerAffiliations: [OWNER, COLLABORATOR]) {
      edges {
        node {
          description
          homepageUrl
          name
          owner {
            login
            url
            ... on Organization {
              name
              id
            }
            __typename
          }
          id
        }
      }
    }
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> fragment option >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> fragment option >> correct request 1`] = `
"{
  organization(login: "facebook") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> fragment spread >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> fragment spread >> correct request 1`] = `
"{
  organization(login: "facebook") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> fragment spreads >> within fragment spreads >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "GetMoviePreview",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": true,
    "hasDeferOrStream": true,
  },
  "fieldTypeMap": Map {
    "query.movie" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": "12345",
      "typeName": "Movie",
    },
    "query.movie.backdrops" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieBackdropsDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Image",
    },
    "query.movie.belongsToCollection" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Collection",
    },
    "query.movie.belongsToCollection.name" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieCollectionDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.movie.belongsToCollection.overview" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieCollectionDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.movie.belongsToCollection.parts" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieCollectionDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Movie",
    },
    "query.movie.belongsToCollection.parts.posterPath" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieCollectionPartsDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.movie.belongsToCollection.parts.title" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieCollectionPartsDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "String",
    },
    "query.movie.belongsToCollection.parts.voteAverage" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieCollectionPartsDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Float",
    },
    "query.movie.belongsToCollection.parts.voteCount" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieCollectionPartsDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Int",
    },
    "query.movie.cast" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieCastDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Cast",
    },
    "query.movie.crew" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieCrewDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Crew",
    },
    "query.movie.recommendations" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieRecommendationsDefer"})",
        ],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": "12345",
      "typeName": "MovieConnection",
    },
    "query.movie.recommendations.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "MovieEdge",
    },
    "query.movie.recommendations.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Movie",
    },
    "query.movie.recommendations.edges.node.releaseDates" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieReleaseDatesDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "ReleaseDates",
    },
    "query.movie.recommendations.edges.node.releaseDates.releaseDates" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "ReleaseDate",
    },
    "query.movie.recommendations.edges.node.videos" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieVideosDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Video",
    },
    "query.movie.recommendations.pageInfo" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "PageInfo",
    },
    "query.movie.reviews" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieReviewsDefer"})",
        ],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": "12345",
      "typeName": "ReviewConnection",
    },
    "query.movie.reviews.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "ReviewEdge",
    },
    "query.movie.reviews.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Review",
    },
    "query.movie.reviews.pageInfo" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "PageInfo",
    },
    "query.movie.similarMovies" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieSimilarDefer"})",
        ],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": "12345",
      "typeName": "MovieConnection",
    },
    "query.movie.similarMovies.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "MovieEdge",
    },
    "query.movie.similarMovies.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Movie",
    },
    "query.movie.similarMovies.edges.node.releaseDates" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieReleaseDatesDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "ReleaseDates",
    },
    "query.movie.similarMovies.edges.node.releaseDates.releaseDates" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "ReleaseDate",
    },
    "query.movie.similarMovies.edges.node.videos" => {
      "directives": {
        "inherited": [
          "defer({"label":"MovieVideosDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Video",
    },
    "query.movie.similarMovies.pageInfo" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "PageInfo",
    },
    "query.movie.videos" => {
      "directives": {
        "inherited": [
          "defer({"label":"VideosDefer"})",
        ],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": true,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Video",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> fragment spreads >> within fragment spreads >> correct request 1`] = `
"query GetMoviePreview {
  movie(id: "12345") {
    backdropPath
    belongsToCollection {
      ...MovieCollection @defer(label: "MovieCollectionDefer")
      id
    }
    homepage
    overview
    popularity
    posterPath
    releaseDate
    runtime
    status
    tagline
    title
    voteAverage
    voteCount
    ...MovieBackdrops @defer(label: "MovieBackdropsDefer")
    ...MovieCast @defer(label: "MovieCastDefer")
    ...MovieCrew @defer(label: "MovieCrewDefer")
    ...MovieRecommendations @defer(label: "MovieRecommendationsDefer")
    ...MovieReviews @defer(label: "MovieReviewsDefer")
    ...MovieSimilar @defer(label: "MovieSimilarDefer")
    ...MovieVideos @defer(label: "VideosDefer")
    id
  }
}

fragment MovieBackdrops on Movie {
  backdrops {
    filePath
    fileType
    height
    width
  }
}

fragment MovieCollection on Collection {
  name
  overview
  parts {
    ...MovieBrief @defer(label: "MovieCollectionPartsDefer")
    id
  }
}

fragment MovieRecommendations on Movie {
  recommendations(first: 10) {
    edges {
      cursor
      node {
        posterPath
        title
        voteAverage
        voteCount
        ...MovieReleaseDates @defer(label: "MovieReleaseDatesDefer")
        ...MovieVideos @defer(label: "MovieVideosDefer")
        id
      }
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
  }
}

fragment MovieSimilar on Movie {
  similarMovies(first: 10) {
    edges {
      cursor
      node {
        posterPath
        title
        voteAverage
        voteCount
        ...MovieReleaseDates @defer(label: "MovieReleaseDatesDefer")
        ...MovieVideos @defer(label: "MovieVideosDefer")
        id
      }
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
  }
}

fragment MovieBrief on Movie {
  posterPath
  title
  voteAverage
  voteCount
  ...MovieReleaseDates @defer(label: "MovieReleaseDatesDefer")
  ...MovieVideos @defer(label: "MovieVideosDefer")
}

fragment MovieCast on Movie {
  cast {
    character
    name
    profilePath
    id
  }
}

fragment MovieCrew on Movie {
  crew {
    department
    gender
    job
    name
    profilePath
    id
  }
}

fragment MovieReviews on Movie {
  reviews(first: 10) {
    edges {
      cursor
      node {
        author
        content
        id
      }
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
  }
}

fragment MovieReleaseDates on Movie {
  releaseDates {
    releaseDates {
      certification
    }
  }
}

fragment MovieVideos on Movie {
  videos {
    name
    key
    site
    type
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> inline fragment >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> inline fragment >> correct request 1`] = `
"{
  organization(login: "facebook") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> inline fragments >> union type >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.search" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "SearchResultItemConnection",
    },
    "query.search.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "SearchResultItemEdge",
    },
    "query.search.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": true,
      "possibleTypes": [
        {
          "isEntity": true,
          "typeName": "Issue",
        },
        {
          "isEntity": true,
          "typeName": "PullRequest",
        },
        {
          "isEntity": true,
          "typeName": "Repository",
        },
        {
          "isEntity": true,
          "typeName": "User",
        },
        {
          "isEntity": true,
          "typeName": "Organization",
        },
        {
          "isEntity": true,
          "typeName": "MarketplaceListing",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "SearchResultItem",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> inline fragments >> union type >> correct request 1`] = `
"{
  search(query: "react", first: 10, type: REPOSITORY) {
    edges {
      node {
        ... on Organization {
          description
          login
          organizationName: name
          id
        }
        ... on Issue {
          bodyText
          number
          title
          id
        }
        ... on MarketplaceListing {
          slug
          shortDescription
          howItWorks
          id
        }
        ... on PullRequest {
          bodyText
          number
          title
          id
        }
        ... on Repository {
          description
          homepageUrl
          name
          id
        }
        __typename
      }
    }
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> multiple variables >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.repositories" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
    "query.organization.repositories.edges.node.owner" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": true,
      "isUnion": false,
      "possibleTypes": [
        {
          "isEntity": true,
          "typeName": "User",
        },
        {
          "isEntity": true,
          "typeName": "Organization",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "RepositoryOwner",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> multiple variables >> correct request 1`] = `
"{
  organization(login: "facebook") {
    description
    email
    login
    name
    repositories(first: 6) {
      edges {
        node {
          description
          homepageUrl
          name
          owner {
            login
            url
            ... on Organization {
              name
              id
            }
            __typename
          }
          id
        }
      }
    }
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> no variable >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> no variable >> correct request 1`] = `
"{
  organization(login: "facebook") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> operation name >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "GetOrganization",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> operation name >> correct request 1`] = `
"query GetOrganization {
  organization(login: "facebook") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> union type inline fragments >> fragment spread >> correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.search" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "SearchResultItemConnection",
    },
    "query.search.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "SearchResultItemEdge",
    },
    "query.search.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": true,
      "possibleTypes": [
        {
          "isEntity": true,
          "typeName": "Issue",
        },
        {
          "isEntity": true,
          "typeName": "PullRequest",
        },
        {
          "isEntity": true,
          "typeName": "Repository",
        },
        {
          "isEntity": true,
          "typeName": "User",
        },
        {
          "isEntity": true,
          "typeName": "Organization",
        },
        {
          "isEntity": true,
          "typeName": "MarketplaceListing",
        },
      ],
      "typeIDValue": undefined,
      "typeName": "SearchResultItem",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> union type inline fragments >> fragment spread >> correct request 1`] = `
"{
  search(query: "react", first: 10, type: REPOSITORY) {
    edges {
      node {
        ... on Organization {
          description
          email
          login
          organizationName: name
          url
          id
        }
        ... on Issue {
          bodyText
          number
          title
          id
        }
        ... on MarketplaceListing {
          slug
          shortDescription
          howItWorks
          id
        }
        ... on PullRequest {
          bodyText
          number
          title
          id
        }
        ... on Repository {
          description
          homepageUrl
          name
          id
        }
        __typename
      }
    }
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> variable correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> variable correct request 1`] = `
"{
  organization(login: "facebook") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> variable with default correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> variable with default correct request 1`] = `
"{
  organization(login: "facebook") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> with default correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> with default correct request 1`] = `
"{
  organization(login: "google") {
    description
    email
    login
    name
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> query >> with number default correct context data 1`] = `
{
  "data": {
    "operation": "query",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "query.organization" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Organization",
    },
    "query.organization.repositories" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": true,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "RepositoryConnection",
    },
    "query.organization.repositories.edges" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": false,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "RepositoryEdge",
    },
    "query.organization.repositories.edges.node" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Repository",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> query >> with number default correct request 1`] = `
"{
  organization(login: "google") {
    description
    email
    login
    name
    repositories(first: 20) {
      edges {
        node {
          description
          name
          id
        }
      }
    }
    url
    id
  }
}"
`;

exports[`@graphql-box/request-parser >> subscription >> correct context data 1`] = `
{
  "data": {
    "operation": "subscription",
    "operationName": "",
    "originalRequestHash": "",
    "queryFiltered": false,
    "requestComplexity": undefined,
    "requestDepth": undefined,
    "requestID": "123456789",
  },
  "debugManager": undefined,
  "deprecated": {
    "experimentalDeferStreamSupport": false,
    "hasDeferOrStream": false,
  },
  "fieldTypeMap": Map {
    "subscription.emailAdded" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Inbox",
    },
    "subscription.emailAdded.emails" => {
      "directives": {
        "inherited": [],
        "own": [],
      },
      "hasArguments": false,
      "hasDirectives": false,
      "isEntity": true,
      "isInterface": false,
      "isUnion": false,
      "possibleTypes": [],
      "typeIDValue": undefined,
      "typeName": "Email",
    },
  },
  "filteredRequest": "",
  "parsedRequest": "",
  "request": "",
}
`;

exports[`@graphql-box/request-parser >> subscription >> correct request 1`] = `
"subscription {
  emailAdded {
    emails {
      from
      message
      subject
      unread
      id
    }
    total
    unread
    id
  }
}"
`;
